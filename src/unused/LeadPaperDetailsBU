import { Box, Container, Grid, TextField, Typography } from '@material-ui/core';
import React, { Fragment, useState } from 'react';
import { convertCamelCaseToSpaces, isLink } from '../../helpers/helpers';
import SelectStage from './SelectStage';
import AccountCircleIcon from '@mui/icons-material/AccountCircle';
import BusinessIcon from '@mui/icons-material/Business';
//---------------------------------------------------------------------------------

function PersonLabel() {
  return (
    <Container
      style={{
        display: 'flex',
        alignItems: 'center',
        paddingLeft: '12px',
      }}>
      <AccountCircleIcon sx={{ color: '#6b6cff', padding: '0.5em' }} />
      <Typography
        padding={1}
        // gutterBottom
        variant="h6">
        Person
      </Typography>
    </Container>
  );
}
function Keys({ keyVal }) {
  return (
    <Grid key={keyVal} item xs={true}>
      <Box
        sx={{
          display: 'flex',
          justifyContent: 'flex-end',
        }}>
        <Typography
          // paddingTop={2}
          // gutterBottom
          variant="caption"
          fontSize={14}
          component="div">
          {convertCamelCaseToSpaces(keyVal)}
        </Typography>
      </Box>
    </Grid>
  );
}
function BlueHoverBox({ value, lead, setLead, editKey, setEditKey, keyVal }) {
  const [editClicked, setEditClicked] = useState(false);
  const [isHovered, setIsHovered] = useState(false);
  const [isTextHovered, setIsTextHovered] = useState(false);

  const key = keyVal;
  const updateLead = (keyToUpdate, valueToUpdate) => {
    if (valueToUpdate !== lead.keyToUpdate) {
      setLead((prevLead) => ({
        ...prevLead,
        [keyToUpdate]: valueToUpdate,
      }));
    } else {
      console.log('same');
    }
  };

  const handleMouseEnter = (key) => {
    if (!editClicked) {
      setIsHovered(true);
      setEditKey(key);
    }
  };

  const handleMouseLeave = () => {
    setIsHovered(false);
  };

  const handleEditClick = () => {
    editKey !== 'stage' && setEditClicked(true);
    setIsHovered(false);
  };

  const handleKeyDown = (event) => {
    if (event.key === 'Enter') {
      updateLead(editKey, event.target.value);
      setEditClicked(false);
    }
    if (event.key === 'Escape') setEditClicked(false);
  };

  const handleValueClick = (event) => {
    const innerText = event.target.innerText;
    event.stopPropagation();
    isLink(innerText) && window.open(innerText, '_blank');
  };

  return (
    <Grid key={value} item xs={true} style={{ minWidth: '200px' }}>
      {/* Blue hover box */}
      <Box
        maxWidth={200}
        onClick={handleEditClick}
        onMouseEnter={() => handleMouseEnter(key)}
        onMouseLeave={handleMouseLeave}
        sx={{
          borderRadius: '2px',
          paddingX: '7px',
          width: '95%',
          '&:hover': {
            backgroundColor: isHovered && '#cbe4ff',
            opacity: [0.9, 0.8, 0.9],
            cursor: 'text',
          },
        }}>
        {/* Value area */}
        {editKey === 'stage' && key === editKey && isHovered ? (
          <SelectStage
            updateLead={updateLead}
            currentStage={value}
            setEditKey={setEditKey}
            setEditClicked={setEditClicked}
          />
        ) : editClicked && key === editKey ? (
          // <input
          //   autoFocus
          //   className={classes.customInput}
          //   type="text"
          //   defaultValue={value}
          //   onKeyDown={handleKeyDown}
          // />
          <TextField
            autoFocus
            size="small"
            variant="standard"
            // color="secondary"
            defaultValue={value}
            onKeyDown={handleKeyDown}
          />
        ) : (
          key !== 'notes' && (
            <div
              style={{
                display: 'inline-block',
                maxWidth: '80%',
              }}>
              <Typography
                variant="subtitle2"
                component="div"
                noWrap
                onMouseEnter={() => {
                  setIsTextHovered(true);
                }}
                onMouseLeave={() => {
                  setIsTextHovered(false);
                }}
                onClick={handleValueClick}
                style={{
                  whiteSpace: 'nowrap',
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                  textDecoration:
                    isTextHovered &&
                    editKey === key &&
                    isLink(value) &&
                    'underline',
                  cursor:
                    isTextHovered &&
                    editKey === key &&
                    isLink(value) &&
                    'pointer',

                  color: isLink(value) && '#0084be',
                }}>
                {value === '' ? '-' : value}
              </Typography>
            </div>
          )
        )}
      </Box>
    </Grid>
  );
}
//--------------------------------------------------------------
export default function LeadPaperDetails({
  lead,
  setLead,
  editKey,
  setEditKey,
}) {
  return (
    <Fragment>
      {/* Person label */}
      <PersonLabel />

      {Object.entries(lead).map(([key, value]) => {
        if (key !== 'notes' && key !== 'company')
          return (
            <Grid
              key={`${key}_${value}`}
              container
              spacing={2}
              // item
              // flexGrow={1}
              style={{ padding: '6px', width: '100%' }}
              wrap="nowrap">
              <Keys keyVal={key} />

              <BlueHoverBox
                value={value}
                lead={lead}
                setLead={setLead}
                editKey={editKey}
                setEditKey={setEditKey}
                keyVal={key}
              />
            </Grid>
          );
        else if (key === 'company')
          return (
            <Box
              sx={{
                // width: 300,
                // height: 300,
                border: '0.5px solid grey',
                backgroundColor: 'primary.dark',
                '&:hover': {
                  backgroundColor: 'primary.main',
                  opacity: [0.9, 0.8, 0.7],
                },
              }}>
              <Container
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  paddingLeft: '12px',
                }}>
                <BusinessIcon sx={{ color: '#6b6cff', padding: '0.5em' }} />
                <Typography
                  padding={1}
                  // gutterBottom
                  variant="h6">
                  Company
                </Typography>
              </Container>
            </Box>
          );
      })}
    </Fragment>
  );
}
